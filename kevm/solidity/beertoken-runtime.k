requires "edsl.md"

module BEERTOKEN-CONTRACT
    imports public EDSL
    
    syntax Contract ::= BeerTokenContract
    
    syntax BeerTokenContract ::= "BeerToken" [symbol(), klabel(contract_BeerToken)]
    
    rule  ( #binRuntime ( BeerToken ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80635a3b7e42116100665780635a3b7e421461014957806370a082311461016757806395d89b4114610197578063a9059cbb146101b5578063be45fd62146101e55761009e565b806306fdde03146100a357806318160ddd146100c1578063313ce567146100df57806340c10f19146100fd57806342966c681461012d575b600080fd5b6100ab610215565b6040516100b89190610af3565b60405180910390f35b6100c96102a7565b6040516100d69190610b2e565b60405180910390f35b6100e76102b1565b6040516100f49190610b65565b60405180910390f35b61011760048036038101906101129190610c14565b6102b6565b6040516101249190610c6f565b60405180910390f35b61014760048036038101906101429190610c8a565b61045f565b005b6101516105ad565b60405161015e9190610af3565b60405180910390f35b610181600480360381019061017c9190610cb7565b6105ea565b60405161018e9190610b2e565b60405180910390f35b61019f610632565b6040516101ac9190610af3565b60405180910390f35b6101cf60048036038101906101ca9190610c14565b6106c4565b6040516101dc9190610c6f565b60405180910390f35b6101ff60048036038101906101fa9190610d49565b61089f565b60405161020c9190610c6f565b60405180910390f35b60606002805461022490610dec565b80601f016020809104026020016040519081016040528092919081815260200182805461025090610dec565b801561029d5780601f106102725761010080835404028352916020019161029d565b820191906000526020600020905b81548152906001019060200180831161028057829003601f168201915b5050505050905090565b6000600154905090565b600090565b60003373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461031257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037890610e69565b60405180910390fd5b81600160008282546103939190610eb8565b92505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103e89190610eb8565b925050819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161044d9190610b2e565b60405180910390a36001905092915050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156104e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc90610f5e565b60405180910390fd5b8181036000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816001600082825461053c9190610f7e565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105a19190610b2e565b60405180910390a35050565b60606040518060400160405280600681526020017f6572633232330000000000000000000000000000000000000000000000000000815250905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606003805461064190610dec565b80601f016020809104026020016040519081016040528092919081815260200182805461066d90610dec565b80156106ba5780601f1061068f576101008083540402835291602001916106ba565b820191906000526020600020905b81548152906001019060200180831161069d57829003601f168201915b5050505050905090565b60008060405180604001604052806004815260200160008152509050826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461072a9190610f7e565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107b69190610eb8565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516108559190610b2e565b60405180910390a37f3ba9136826ac751de05d770d8d34fa4440ada49a5fb0e9aa1678aece66dad9768160405161088c9190611007565b60405180910390a1600191505092915050565b6000836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108eb9190610f7e565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109779190610eb8565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051610a169190610b2e565b60405180910390a37f3ba9136826ac751de05d770d8d34fa4440ada49a5fb0e9aa1678aece66dad9768383604051610a4f929190611065565b60405180910390a160019050949350505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a9d578082015181840152602081019050610a82565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ac582610a63565b610acf8185610a6e565b9350610adf818560208601610a7f565b610ae881610aa9565b840191505092915050565b60006020820190508181036000830152610b0d8184610aba565b905092915050565b6000819050919050565b610b2881610b15565b82525050565b6000602082019050610b436000830184610b1f565b92915050565b600060ff82169050919050565b610b5f81610b49565b82525050565b6000602082019050610b7a6000830184610b56565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bb582610b8a565b9050919050565b610bc581610baa565b8114610bd057600080fd5b50565b600081359050610be281610bbc565b92915050565b610bf181610b15565b8114610bfc57600080fd5b50565b600081359050610c0e81610be8565b92915050565b60008060408385031215610c2b57610c2a610b80565b5b6000610c3985828601610bd3565b9250506020610c4a85828601610bff565b9150509250929050565b60008115159050919050565b610c6981610c54565b82525050565b6000602082019050610c846000830184610c60565b92915050565b600060208284031215610ca057610c9f610b80565b5b6000610cae84828501610bff565b91505092915050565b600060208284031215610ccd57610ccc610b80565b5b6000610cdb84828501610bd3565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610d0957610d08610ce4565b5b8235905067ffffffffffffffff811115610d2657610d25610ce9565b5b602083019150836001820283011115610d4257610d41610cee565b5b9250929050565b60008060008060608587031215610d6357610d62610b80565b5b6000610d7187828801610bd3565b9450506020610d8287828801610bff565b935050604085013567ffffffffffffffff811115610da357610da2610b85565b5b610daf87828801610cf3565b925092505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e0457607f821691505b602082108103610e1757610e16610dbd565b5b50919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000610e53601f83610a6e565b9150610e5e82610e1d565b602082019050919050565b60006020820190508181036000830152610e8281610e46565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ec382610b15565b9150610ece83610b15565b9250828201905080821115610ee657610ee5610e89565b5b92915050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000610f48602283610a6e565b9150610f5382610eec565b604082019050919050565b60006020820190508181036000830152610f7781610f3b565b9050919050565b6000610f8982610b15565b9150610f9483610b15565b9250828203905081811115610fac57610fab610e89565b5b92915050565b600081519050919050565b600082825260208201905092915050565b6000610fd982610fb2565b610fe38185610fbd565b9350610ff3818560208601610a7f565b610ffc81610aa9565b840191505092915050565b600060208201905081810360008301526110218184610fce565b905092915050565b82818337600083830152505050565b60006110448385610fbd565b9350611051838584611029565b61105a83610aa9565b840190509392505050565b60006020820190508181036000830152611080818486611038565b9050939250505056fea2646970667358221220229a75dd3a9e32827cc160abe4150d9ad83495e241d95794b885b4c50c95eb8a64736f6c63430008130033" ) )
      
    
    syntax Field ::= BeerTokenField
    
    syntax BeerTokenField ::= "_balances" [symbol(), klabel(field_BeerToken__balances)]
    
    syntax BeerTokenField ::= "_totalSupply" [symbol(), klabel(field_BeerToken__totalSupply)]
    
    syntax BeerTokenField ::= "_name" [symbol(), klabel(field_BeerToken__name)]
    
    syntax BeerTokenField ::= "_symbol" [symbol(), klabel(field_BeerToken__symbol)]
    
    syntax BeerTokenField ::= "_owner" [symbol(), klabel(field_BeerToken__owner)]
    
    rule  ( #loc ( BeerToken . _balances ) => 0 )
      
    
    rule  ( #loc ( BeerToken . _totalSupply ) => 1 )
      
    
    rule  ( #loc ( BeerToken . _name ) => 2 )
      
    
    rule  ( #loc ( BeerToken . _symbol ) => 3 )
      
    
    rule  ( #loc ( BeerToken . _owner ) => 4 )
      
    
    syntax Bytes ::= BeerTokenContract "." BeerTokenMethod [function(), symbol(), klabel(method_BeerToken)]
    
    syntax BeerTokenMethod ::= "balanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_BeerToken_balanceOf_address)]
    
    syntax BeerTokenMethod ::= "burn" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BeerToken_burn_uint256)]
    
    syntax BeerTokenMethod ::= "decimals" "(" ")" [symbol(), klabel(method_BeerToken_decimals_)]
    
    syntax BeerTokenMethod ::= "mint" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_BeerToken_mint_address_uint256)]
    
    syntax BeerTokenMethod ::= "name" "(" ")" [symbol(), klabel(method_BeerToken_name_)]
    
    syntax BeerTokenMethod ::= "standard" "(" ")" [symbol(), klabel(method_BeerToken_standard_)]
    
    syntax BeerTokenMethod ::= "symbol" "(" ")" [symbol(), klabel(method_BeerToken_symbol_)]
    
    syntax BeerTokenMethod ::= "totalSupply" "(" ")" [symbol(), klabel(method_BeerToken_totalSupply_)]
    
    syntax BeerTokenMethod ::= "transfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_BeerToken_transfer_address_uint256)]
    
    syntax BeerTokenMethod ::= "transfer" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_BeerToken_transfer_address_uint256_bytes)]
    
    rule  ( BeerToken . balanceOf ( V0_account : address ) => #abiCallData ( "balanceOf" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( BeerToken . burn ( V0_amount : uint256 ) => #abiCallData ( "burn" , #uint256 ( V0_amount ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_amount )
      
    
    rule  ( BeerToken . decimals ( ) => #abiCallData ( "decimals" , .TypedArgs ) )
      
    
    rule  ( BeerToken . mint ( V0_account : address , V1_amount : uint256 ) => #abiCallData ( "mint" , #address ( V0_account ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))
      
    
    rule  ( BeerToken . name ( ) => #abiCallData ( "name" , .TypedArgs ) )
      
    
    rule  ( BeerToken . standard ( ) => #abiCallData ( "standard" , .TypedArgs ) )
      
    
    rule  ( BeerToken . symbol ( ) => #abiCallData ( "symbol" , .TypedArgs ) )
      
    
    rule  ( BeerToken . totalSupply ( ) => #abiCallData ( "totalSupply" , .TypedArgs ) )
      
    
    rule  ( BeerToken . transfer ( V0_to : address , V1_value : uint256 ) => #abiCallData ( "transfer" , #address ( V0_to ) , #uint256 ( V1_value ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_to )
       andBool ( #rangeUInt ( 256 , V1_value )
               ))
      
    
    rule  ( BeerToken . transfer ( V0_to : address , V1_value : uint256 , V2_data : bytes ) => #abiCallData ( "transfer" , #address ( V0_to ) , #uint256 ( V1_value ) , #bytes ( V2_data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_to )
       andBool ( #rangeUInt ( 256 , V1_value )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_data ) )
               )))
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "burn(uint256)" ) => 1117154408 )
      
    
    rule  ( selector ( "decimals()" ) => 826074471 )
      
    
    rule  ( selector ( "mint(address,uint256)" ) => 1086394137 )
      
    
    rule  ( selector ( "name()" ) => 117300739 )
      
    
    rule  ( selector ( "standard()" ) => 1513848386 )
      
    
    rule  ( selector ( "symbol()" ) => 2514000705 )
      
    
    rule  ( selector ( "totalSupply()" ) => 404098525 )
      
    
    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )
      
    
    rule  ( selector ( "transfer(address,uint256,bytes)" ) => 3192257890 )
      

endmodule

module MAIN
    imports public BEERTOKEN-CONTRACT
    
    

endmodule

